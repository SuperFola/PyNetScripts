#!/usr/bin/env python3

from scapy.all import IP, sniff, IFACES
import socket
from time import time
import re, os, sys
import texttable as tt
import colorama


re_ip = r"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
color = {
    'b':  colorama.Fore.WHITE,
    'KB': colorama.Fore.CYAN,
    'MB': colorama.Fore.MAGENTA,
    'GB': colorama.Fore.RED,
    'TB': colorama.Fore.YELLOW
}


def clear():
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')


def main(interface="eth0", ipfilter=re_ip, pool_interval=5, refresh=False, show_null=False, order='total'):
    colorama.init()

    # total
    sorting_meth = lambda x: x[1]['in'] + x[1]['out']
    order_rev = True
    if order == 'bwin':
        sorting_meth = lambda x: x[1]['tfin']['in']
        order_rev = True
    elif order == 'bwout':
        sorting_meth = lambda x: x[1]['tfout']['out']
        order_rev = True
    elif order == 'ip':
        sorting_meth = lambda x: x[0]
        order_rev = False

    total = {}
    '''
    {
        ip => {in => qu ; out => qu}
    }
    '''

    # return human readable units given bytes
    def human(num, in_sec=True):
        if num is None:
            text = "0.0 b/sec" if in_sec else "0.0 b"
            return color['b'] + text + colorama.Style.RESET_ALL

        for x in ['b', 'KB', 'MB', 'GB', 'TB']:
            if num < 1024.0:
                if in_sec:
                    return color[x] + f"{num / pool_interval:3.1f} {x}/sec" + colorama.Style.RESET_ALL
                else:
                    return color[x] + f"{num:3.1f} {x}" + colorama.Style.RESET_ALL
            num /= 1024.0

    # callback function to process each packet
    # get total packets for each source->destination combo
    def traffic_monitor_callbak(pkt):
        if IP in pkt:
            src = pkt.sprintf("%IP.src%")
            dst = pkt.sprintf("%IP.dst%")
            size = pkt.sprintf("%IP.len%")

            total[src] = {'in': 0, 'out': 0, 'tfin': 0, 'tfout': 0} if src not in total else {
                'in': total[src]['in'],
                'out': total[src]['out'] + int(size),
                'tfin': total[src]['tfin']  + int(size),
                'tfout': total[src]['tfout'] + int(size)
            }
            total[dst] = {'in': 0, 'out': 0, 'tfin': 0, 'tfout': 0} if dst not in total else {
                'in': total[dst]['in'] + int(size),
                'out': total[dst]['out'],
                'tfin': total[src]['tfin']  + int(size),
                'tfout': total[src]['tfout'] + int(size)
            }

    def gen_table():
        tab = tt.Texttable()
        tab.set_deco(tt.Texttable.HEADER)
        tab.header(['Source', 'In', 'Out', 'Host name', 'Total in', 'Total out'])
        tab.set_header_align(['l', 'l', 'l', 'l', 'l', 'l'])
        tab.set_cols_align(['l', 'l', 'l', 'l', 'l', 'l'])
        tab.set_cols_dtype(['t', 't', 't', 't', 't', 't'])
        tab.set_cols_width([16, 22, 22, 52, 22, 22])
        return tab

    tab = gen_table()
    print(tab.draw())

    while True:
        ipfilter = re.compile(ipfilter)

        while True:
            try:
                sniff(iface=interface, prn=traffic_monitor_callbak, store=0, timeout=pool_interval)
                break
            except OSError:
                pass
        # sort by total bytes, descending
        total_sorted = sorted(total.items(), key=sorting_meth, reverse=order_rev)

        tab = gen_table()

        for data in total_sorted:
            src, transfert = data
            if not re.search(ipfilter, src):
                continue

            try:
                src_name = socket.gethostbyaddr(src)[0]
            except:
                src_name = "???"

            t_in = human(transfert['tfin'])
            t_out = human(transfert['tfout'])

            # skip host with a bw usage = 0
            if not transfert['tfin'] and not transfert['tfout'] and not show_null:
                continue

            tab.add_row([
                src,
                t_in,
                t_out,
                src_name,
                human(transfert['in'], False),
                human(transfert['out'], False)
            ])

        clear()
        print(tab.draw())

        if not refresh:
            break


if __name__ == '__main__':
    if "-h" in sys.argv[1:]:
        print(f"""Usage {sys.argv[0]}

{sys.argv[0]} [interface] [ipfilter] [pool_interval] [-r] [-z] [-sort by]
    default interface     is eth0 (use '/' to replace ' ')
    default ipfilter      is {re_ip}, use / to use the default one
    default pool_interval is 5 seconds

{sys.argv[0]} [-h|-i]

OPTIONS
    -h\tHelp message
    -i\tShow the interfaces and exit
    -r\tRefresh interface after each sniff (default is false)
    -z\tDo not show host with a bandwidth usage equal to zero (default: false)
    -sort <by>\tChoose the sorting method between
            total (descending),
            bwin  (descending),
            bwout (descending),
            ip    (ascending)
        (default is total)
""")
    elif "-i" in sys.argv[1:]:
        print("""
Interfaces
==========
""")
        IFACES.show(True)
    else:
        clear()
        main(
            interface=sys.argv[1].replace('/', ' ') if len(sys.argv) >= 2 else "eth0",
            ipfilter=sys.argv[2] if len(sys.argv) >= 3 and sys.argv[2] != '/' else re_ip,
            pool_interval=int(sys.argv[3]) if len(sys.argv) >= 4 else -1,
            refresh='-r' in sys.argv[1:],
            show_null='-z' not in sys.argv[1:],
            order=sys.argv[sys.argv.index('-sort') + 1] if '-sort' in sys.argv and sys.argv.index('-sort') + 1 < len(sys.argv) else 'total'
        )